---
// Home.astro
---

<div class="home-container">
    <div id="video-background">
        <iframe 
            src="https://player.vimeo.com/video/1082696585?background=1&controls=0&autoplay=1&loop=1&autopause=0&muted=1" 
            frameborder="0" 
            allow="autoplay; fullscreen" 
            allowfullscreen 
            data-ready="true">
        </iframe>
    </div>

    <div id="content">
        <div id="container">
            <span id="text1"></span>
            <span id="text2"></span>
        </div>
        <svg id="filters">
            <defs>
                <filter id="threshold">
                    <feColorMatrix
                        in="SourceGraphic"
                        type="matrix"
                        values="1 0 0 0 0
                                0 1 0 0 0
                                0 0 1 0 0
                                0 0 0 255 -140"
                    />
                </filter>
            </defs>
        </svg>
    </div>
</div>

<style>
    /* Container wrapping everything */
    .home-container {
        position: relative;
        width: 100%;
        height: 100%;
    }

    .bg-video {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: -2;
    }

    .bg-video .text {
        color: white;
    }

    #content {
        position: sticky;
        top: 0;
        left: 0;
        z-index: -1;
        width: 100vw;
        height: 100vh;
        color: white;
        margin: 0;
        min-height: 100vh;
    }

    #container {
        position: absolute;
        margin: auto;
        width: 100vw;
        height: 50%;
        top: 0;
        bottom: 0;
        filter: url(#threshold) blur(0.6px);
    }

    #text1,
    #text2 {
        position: absolute;
        width: 100%;
        display: inline-block;
        font-family: "Comfortaa", 'Lato', sans-serif;
        font-size: 5rem;
        text-align: center;
        user-select: none;
    }

    /* ABOUT SECTION */
    .about-container {
        background-color: black;
        color: white;
        display: flex;
        flex-wrap: wrap;
        flex-direction: row;
        justify-content: center;
        align-items: center;
        z-index: -10;
        padding: 10%;
        gap: 50px;
    }

    .about-container h2 {
        font-family: "Italiana", sans-serif;
        font-size: 3rem;
        color: #e63b6b;
    }

    .about-container .text {
        max-width: 400px;
        font-family: "Lato";
    }

    .about-container p {
        font-weight: 300;
    }

    .about-container img {
        max-width: 400px;
        height: auto;
    }

    .black-bg {
        background-color: black;
        min-height: 100vh;
        width: 100vw;
    }

    #video-background {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        overflow: hidden;
        z-index: -1;
        transition: opacity 0.5s ease;
        background-color: black;
    }

    #video-background iframe {
        position: absolute;
        top: 50%;
        left: 50%;
        width: 100vw;
        height: 56.25vw;
        min-height: 100vh;
        min-width: 177.77vh;
        transform: translate(-50%, -50%);
    }

    .fade-in {
        opacity: 0;
        transition: opacity 3s ease-in-out;
    }

    .fade-in.visible {
        opacity: 1;
    }

    @media (max-width: 768px) {
        #text1,
        #text2 {
            font-size: 3rem;
        }
    }
</style>

<script>
    const texts = ["i am", "creatrix", "human", "criatura", "mover", "witness", "artist"];
    const morphTime = 3;
    const cooldownTime = 0.25;

    let textIndex = texts.length - 1;
    let time = new Date();
    let morph = 0;
    let cooldown = cooldownTime;

    const text1 = document.getElementById('text1');
    const text2 = document.getElementById('text2');

    if (text1 && text2) {
        text1.textContent = texts[textIndex % texts.length];
        text2.textContent = texts[(textIndex + 1) % texts.length];

        function doMorph() {
            morph -= cooldown;
            cooldown = 0;
            let fraction = morph / morphTime;
            if (fraction > 1) {
                cooldown = cooldownTime;
                fraction = 1;
            }
            setMorph(fraction);
        }

        function setMorph(fraction) {
            text2.style.filter = `blur(${Math.min(8 / fraction - 8, 100)}px)`;
            text2.style.opacity = `${Math.pow(fraction, 0.4) * 100}%`;
            let invFraction = 1 - fraction;
            text1.style.filter = `blur(${Math.min(8 / invFraction - 8, 100)}px)`;
            text1.style.opacity = `${Math.pow(invFraction, 0.4) * 100}%`;
            text1.textContent = texts[textIndex % texts.length];
            text2.textContent = texts[(textIndex + 1) % texts.length];
        }

        function doCooldown() {
            morph = 0;
            text2.style.filter = "";
            text2.style.opacity = "100%";
            text1.style.filter = "";
            text1.style.opacity = "0%";
        }

        function animate() {
            requestAnimationFrame(animate);
            let newTime = new Date();
            let shouldIncrementIndex = cooldown > 0;
            let dt = (newTime - time) / 1000;
            time = newTime;

            cooldown -= dt;
            if (cooldown <= 0) {
                if (shouldIncrementIndex) {
                    textIndex++;
                }
                doMorph();
            } else {
                doCooldown();
            }
        }

        animate();
    }

    // Intersection Observer for fade-in effect
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px'
    };

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('visible');
            }
        });
    }, observerOptions);

    document.querySelectorAll('.fade-in').forEach(el => {
        observer.observe(el);
    });
</script>